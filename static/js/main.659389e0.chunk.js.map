{"version":3,"sources":["components/SearchBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchForm","styled","form","DropdownRoot","select","DropdownItem","option","SearchInput","input","SearchButton","button","SearchBar","React","useState","searchEngine","setSearchEngine","searchText","setSearchText","onSubmit","e","preventDefault","window","open","encodeURIComponent","console","log","onChange","target","value","type","Root","div","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+3BAGA,IAAMA,EAAaC,IAAOC,KAAV,KAUVC,EAAeF,IAAOG,OAAV,KAMZC,EAAeJ,IAAOK,OAAV,KAEZC,EAAcN,IAAOO,MAAV,KAOXC,EAAeR,IAAOS,OAAV,KAgDHC,EA5CG,WAAO,IAAD,EACkBC,IAAMC,SAAS,UADjC,mBACfC,EADe,KACDC,EADC,OAEcH,IAAMC,SAAS,IAF7B,mBAEfG,EAFe,KAEHC,EAFG,KAwBtB,OACE,kBAACjB,EAAD,CAAYkB,SAtBO,SAACC,GAEpB,GADAA,EAAEC,iBACGJ,EAAL,CACA,OAAQF,GACN,IAAK,SACHO,OAAOC,KACL,mCAAqCC,mBAAmBP,IAE1D,MACF,IAAK,gBACHK,OAAOC,KACL,sCAAwCC,mBAAmBP,IAOjEQ,QAAQC,IAAIX,GACZU,QAAQC,IAAIT,MAIV,kBAACb,EAAD,CACEuB,SAAU,SAACP,GACTJ,EAAgBI,EAAEQ,OAAOC,SAG3B,kBAACvB,EAAD,CAAcuB,MAAM,UAApB,UACA,kBAACvB,EAAD,CAAcuB,MAAM,iBAApB,kBAEF,kBAACrB,EAAD,CACEmB,SAAU,SAACP,GACTF,EAAcE,EAAEQ,OAAOC,UAG3B,kBAACnB,EAAD,CAAcoB,KAAK,UAAnB,mB,0HCnEN,IAAMC,EAAO7B,IAAO8B,IAAV,KAcKC,MARf,WACE,OACE,kBAACF,EAAD,KACE,kBAAC,EAAD,QCDcG,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.659389e0.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SearchForm = styled.form`\n  display: flex;\n  flex: 1;\n  justify-content: space-between;\n  align-items: center;\n  margin: auto;\n  max-width: 800px;\n  height: 48px;\n`;\n\nconst DropdownRoot = styled.select`\n  position: relative;\n  overflow: hidden;\n  height: 100%;\n`;\n\nconst DropdownItem = styled.option``;\n\nconst SearchInput = styled.input`\n  box-sizing: border-box;\n  flex: 1;\n  height: 100%;\n  font-size: 20px;\n`;\n\nconst SearchButton = styled.button`\n  height: 100%;\n`;\n\nconst SearchBar = () => {\n  const [searchEngine, setSearchEngine] = React.useState(\"Google\");\n  const [searchText, setSearchText] = React.useState(\"\");\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!searchText) return;\n    switch (searchEngine) {\n      case \"Google\":\n        window.open(\n          \"https://www.google.com/search?q=\" + encodeURIComponent(searchText)\n        );\n        break;\n      case \"StackOverflow\":\n        window.open(\n          \"https://stackoverflow.com/search?q=\" + encodeURIComponent(searchText)\n        );\n        break;\n\n      default:\n        break;\n    }\n    console.log(searchEngine);\n    console.log(searchText);\n  };\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <DropdownRoot\n        onChange={(e) => {\n          setSearchEngine(e.target.value);\n        }}\n      >\n        <DropdownItem value=\"Google\">Google</DropdownItem>\n        <DropdownItem value=\"StackOverflow\">StackOverflow</DropdownItem>\n      </DropdownRoot>\n      <SearchInput\n        onChange={(e) => {\n          setSearchText(e.target.value);\n        }}\n      />\n      <SearchButton type=\"submit\">Search in web</SearchButton>\n    </SearchForm>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SearchBar from \"./components/SearchBar\";\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n`;\n\nfunction App() {\n  return (\n    <Root>\n      <SearchBar />\n    </Root>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}